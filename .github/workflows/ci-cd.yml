name: Deploy Flask App to AWS ECS

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggers

env:
  AWS_REGION: us-east-1
  ECR_REPO: ${{ secrets.ECR_REPO }}
  ECS_CLUSTER: flask-cluster
  ECS_SERVICE: flask-service
  TASK_FAMILY: flask-task

jobs:
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO

      - name: Build and Tag Docker Image
        run: |
          docker build -t $ECR_REPO:latest .
          docker tag $ECR_REPO:latest $ECR_REPO:$(git rev-parse --short HEAD)

      - name: Push Docker Image to ECR
        run: |
          docker push $ECR_REPO:latest
          docker push $ECR_REPO:$(git rev-parse --short HEAD)

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Initialize Terraform
        run: terraform init

      - name: Apply Terraform Changes
        run: terraform apply -auto-approve
